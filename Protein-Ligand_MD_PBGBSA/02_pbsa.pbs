#!/bin/bash
#
# Author:
# Aleksandra Ivanova
# Date : 20.02.2022
#
# Description: The following script run MMP(G)BSA method for Protein-ligand binding free energy calculations.  
#
# Run Information: You should prepare input files beforehand:
#                  *.tpr, *.xtc and "index.ndx", "topol.top" files obtained after succesfull MD simulation. 
#                  "mmpbsa.in" file to set MMP(G)BSA parameters.
# 
# Arguments: 
#            Required: 
#            tpr - *.tpr AND xtc - *.xtc
#            OR
#            MDNAME - prefix for the *.tpr, *.xtc files in the wdir directory (prior)
#           
#            Additional arguments:
#            script_path - dir contains "mmpbsa.in" file. This argument can be skipped, if so current directory will be used. 
#            wdir - working directory. This argument can be skipped, if so current directory will be used.
#            topol - topol.top. Default: $wdir/topol.top
#            index - index.ndx. Default: $ wdir/index.top
#            NP - number of processors. Should be less than total number of using frames. Default: 128  
#            LNAME - Ligand ID. Default: UNL
#            wdir should contain:
#            index.ndx  ligand.itp  md_fit.xtc  md_out.tpr  solv_ions.gro  topol.top
# Example call: qsub -v tpr=md_out.tpr,xtc=md_fit.xtc,script_path=path,wdir=$(pwd) 02_pbsa.pbs
#  
#
#PBS -l select=1:ncpus=128:mpiprocs=128
#PBS -k oe

if [ -z $gromacs_version ];
 then
  gromacs_version="GROMACS/2021.4-foss-2020b-PLUMED-2.7.3"
fi

module load $gromacs_version
source activate gmxMMPBSA

# allows relative paths
cd $PBS_O_WORKDIR

>&2 echo 'Script running:***************************** 1. Variable setting *********************************'

if [ -z $wdir ]
  then wdir=$PBS_O_WORKDIR
fi

if [ -z $script_path ]
  then script_path=$PBS_O_WORKDIR
fi

if [ -z $topol ]
  then topol=topol.top
fi

if [ -z $index ]
  then index=index.ndx
fi

if [ -z $LNAME ]
  then LNAME="UNL"
fi

if [ -z $NP ]
  then NP=128
fi

cd $wdir
>&2 echo 'NP:' $NP
>&2 echo 'WDIR:' $wdir
>&2 echo 'gromacs_version:' $gromacs_version

index_ligand=$(gmx make_ndx -f solv_ions.gro -n index.ndx <<< "q" | sed -rn "s/([0-9]+) "$LNAME"[0-9: ]*atoms/\1/p"| head -1)
index_protein=$(gmx make_ndx -f solv_ions.gro -n index.ndx <<< "q" | sed -rn "s/([0-9]+) Protein[0-9: ]*atoms/\1/p"| head -1)
>&2 echo 'Ligand Index:' $index_ligand

cp $script_path/mmpbsa.in .

>&2 echo # $script_path/mmpbsa.in
>&2 cat mmpbsa.in

if test -f FINAL_RESULTS_MMPBSA.dat ; then
tec_dat=$(stat --printf=%z FINAL_RESULTS_MMPBSA.dat | grep -oE  '[0-9-]{8} [0-9:]{8}' | sed -E 's/[[:space:]]|\:/-/g')
mv FINAL_RESULTS_MMPBSA.dat FINAL_RESULTS_MMPBSA_$tec_dat\.dat
test -f gmx_MMPBSA.log && mv gmx_MMPBSA.log gmx_MMPBSA_$tec_dat\.log
fi



>&2 echo 'Script running:***************************** 2. MMP(G)BSA Running  *********************************'
mpirun -np $NP gmx_MMPBSA MPI -O -i $script_path/mmpbsa.in -cs $tpr -ci $index -cg 1 $index_ligand -ct $xtc -cp $topol -nogui 
## terms per time -eo energ_term.csv

#test -f gmx_MMPBSA.log && mv gmx_MMPBSA.log gmx_MMPBSA_1.log
#mpirun -np $NP gmx_MMPBSA MPI --clean
#test -f gmx_MMPBSA_1.log && cp gmx_MMPBSA_1.log gmx_MMPBSA.log


>&2 echo 'Script running:***************************** 3. Finish  *********************************'
cp ~/$PBS_JOBNAME.{e,o}${PBS_JOBID%.*} .

